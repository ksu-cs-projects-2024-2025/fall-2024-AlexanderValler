@page
@model BlockOut.Pages.Account.ProfileModel
@using Microsoft.AspNetCore.Identity
@using BlockOut.Models
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Account";
}

<div class="container mt-5">
    <form method="post" asp-page-handler="UpdateProfilePicture">
        @Html.AntiForgeryToken()

        <!-- Header with Account Information and Delete Account link -->
        <div class="row">
            <div class="col-md-8">
                <h2 class="border-bottom pb-2" style="color: #4b4b4b;">Account Information</h2>
            </div>
            <div class="col-md-4 text-end d-none d-md-block">
                <a href="/Account/DeleteAccount" class="text-danger text-decoration-none" role="button" style="font-size: 0.9em;">Delete Account</a>
            </div>
        </div>

        <div class="row mt-4">
            <!-- Profile Icon on the Left with Clickable Popup -->
            <div class="col-md-3 position-relative">
                <img id="profile-icon" src="~/images/@(Model.ProfilePictureId).png" alt="User Avatar" class="img-fluid profile-icon"
                     style="cursor: pointer;" onclick="toggleProfilePopup()">

                <!-- Profile Selection Popup -->
                <div id="profile-popup" class="profile-popup d-none">
                    <div class="d-flex flex-wrap">
                        @for (int i = 1; i <= 6; i++)
                        {
                            <img src="~/images/@(i).png" alt="Profile Option @i" class="profile-option" id="option-@i"
                                 onclick="selectProfilePicture(@i)">
                        }
                    </div>
                    <button type="button" class="btn btn-primary btn-sm mt-2" onclick="saveProfilePicture()">Save</button>
                </div>
            </div>

            <!-- User Information -->
            <div class="col-md-9 offset-md-1" style="padding-top: 40px;">
                <!-- Name Field -->
                <div class="mb-3 d-flex align-items-center" style="padding-top: 20px;">
                    <strong>Name:</strong>
                    <div id="name-display" class="ms-2">@Model.UserName</div>
                    <input type="text" id="name-edit" class="form-control ms-2 d-none" value="@Model.UserName" style="width: 300px;" />
                    <button class="btn btn-primary btn-sm ms-2" id="name-button" onclick="toggleNameEdit(event)">Change</button>
                </div>

                <!-- Email Field -->
                <div class="mb-3 d-flex align-items-center">
                    <strong>Email:</strong>
                    <div id="email-display" class="ms-2">@Model.Email</div>
                    <input type="email" id="email-edit" class="form-control ms-2 d-none" value="@Model.Email" style="width: 300px;" />
                    <button class="btn btn-primary btn-sm ms-2" id="email-button" onclick="toggleEmailEdit(event)">Change</button>
                </div>

                <!-- Change Password Button -->
                <div class="mb-3">
                    <a href="/Account/Reset" class="btn btn-secondary">Change Password</a>
                </div>

                <!-- List of Businesses -->
                <div class="mt-4">
                    <h4>Businesses</h4>
                    <ul class="list-group">
                        @foreach (var business in Model.Businesses)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @business.Name  <span class="text-muted">@business.Role</span>
                                <button class="btn btn-sm btn-danger" onclick="leaveBusiness('@business.Name')">Leave</button>
                            </li>
                        }
                    </ul>
                </div>

                <hr />
            </div>
        </div>
    </form>
</div>

<script>
    let selectedProfilePicture = null;
    let originalSelection = null;

    function toggleProfilePopup() {
        const popup = document.getElementById("profile-popup");
        popup.classList.toggle("d-none");

        originalSelection = selectedProfilePicture;

        document.addEventListener("click", closePopupOnOutsideClick);
    }

    function closePopupOnOutsideClick(event) {
        const popup = document.getElementById("profile-popup");
        const profileIcon = document.getElementById("profile-icon");

        if (!popup.contains(event.target) && event.target !== profileIcon) {
            popup.classList.add("d-none");
            document.removeEventListener("click", closePopupOnOutsideClick);
            selectedProfilePicture = originalSelection;
            updateSelectionHighlight();
        }
    }

    function selectProfilePicture(option) {
        selectedProfilePicture = option;
        updateSelectionHighlight();
    }

    function updateSelectionHighlight() {
        document.querySelectorAll(".profile-option").forEach(img => img.classList.remove("selected"));
        if (selectedProfilePicture) {
            document.getElementById(`option-${selectedProfilePicture}`).classList.add("selected");
        }
    }

    function saveProfilePicture() {
        const popup = document.getElementById("profile-popup");

        if (!selectedProfilePicture) {
            popup.classList.add("d-none");
            return;
        }

        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        fetch('/Account/Profile?handler=UpdateProfilePicture', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ profilePictureId: selectedProfilePicture })
        })
            .then(response => {
                if (response.ok) {
                    document.getElementById("profile-icon").src = `/images/${selectedProfilePicture}.png`;
                    location.reload();
                } else {
                    console.error('Failed to update profile picture');
                }
            })
            .catch(error => console.error('Error:', error));

        popup.classList.add("d-none");
    }
    function toggleEmailEdit(event) {
        event.preventDefault();
        const emailDisplay = document.getElementById("email-display");
        const emailEdit = document.getElementById("email-edit");
        const emailButton = document.getElementById("email-button");

        if (emailButton.textContent === "Change") {
            emailDisplay.classList.add("d-none");
            emailEdit.classList.remove("d-none");
            emailButton.textContent = "Confirm";
        } else {
            const newEmail = emailEdit.value.trim();
            if (!newEmail.includes("@@")) {
                alert("Invalid email format.");
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch('/Account/Profile?handler=UpdateEmail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ email: newEmail })
            })
                .then(response => {
                    if (response.ok) location.reload();
                    else alert("Email already in use or invalid.");
                });
        }
    }
    function toggleNameEdit(event) {
        event.preventDefault();
        const nameDisplay = document.getElementById("name-display");
        const nameEdit = document.getElementById("name-edit");
        const nameButton = document.getElementById("name-button");

        if (nameButton.textContent === "Change") {
            nameDisplay.classList.add("d-none");
            nameEdit.classList.remove("d-none");
            nameButton.textContent = "Confirm";
        } else {
            const newName = nameEdit.value.trim();
            if (newName.length < 2) {
                alert("Name must be at least 2 characters long.");
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch('/Account/Profile?handler=UpdateName', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ name: newName })
            }).then(response => {
                if (response.ok) location.reload();
                else alert("Failed to update name.");
            });
        }
    }

    function leaveBusiness(businessName) {
        if (confirm(`Are you sure you want to leave ${businessName}?`)) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch('/Account/Profile?handler=LeaveBusiness', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ businessName })
            }).then(response => {
                if (response.ok) location.reload();
                else alert("Failed to leave business.");
            });
        }
    }
</script>

<style>
    .profile-icon {
        width: 200px;
        height: 200px;
        object-fit: contain;
    }

    .profile-popup {
        position: absolute;
        top: 100%;
        left: 0;
        width: 200px;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1000;
    }

    .profile-option {
        width: 60px;
        height: 60px;
        margin: 5px;
        cursor: pointer;
        border: 1px solid transparent;
        object-fit: contain;
    }

    .profile-option.selected {
        border: 2px solid #007bff;
    }

    .profile-option:hover {
        border-color: #007bff;
    }
</style>
