@page
@model BlockOut.Pages.Businesses.CreateBusinessModel
@{
    ViewData["Title"] = "Create New Business";
}

<h2>Create New Business</h2>

<form method="post" oninput="checkFormValidity()" id="create-business-form">
    @Html.AntiForgeryToken()

    <!-- Hidden field for Business.Id -->
    <input type="hidden" asp-for="Business.Id" value="@Model.Business.Id" />
    <span asp-validation-for="Business.Id" class="text-danger"></span>

    <!-- Business Name -->
    <div class="form-group">
        <label asp-for="Business.Name">Business Name</label>
        <input asp-for="Business.Name" id="business-name" class="form-control" onblur="checkBusinessName()" required />
        <span asp-validation-for="Business.Name" class="text-danger"></span>
        <span id="business-name-error" class="text-danger">@Model.ConflictingBusinessNameMessage</span>
    </div>

    <!-- Open Hours -->
    <h4>Business Open Hours</h4>
    <p>Set open and close times for each day. Toggle "Closed" if the business is closed for the day.</p>
    @for (int i = 0; i < Model.DaysOfWeek.Length; i++)
    {
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">@Model.DaysOfWeek[i]</label>
            <div class="col-sm-2">
                <input type="checkbox" id="day-toggle-@i" name="Business.OpenHours[@i].IsClosed" value="true" onchange="toggleDay(@i)" />
                <label for="day-toggle-@i">Closed</label>
            </div>
            <div class="col-sm-4">
                <label>Open Time</label>
                <input type="time" name="Business.OpenHours[@i].OpenTime" class="form-control" id="open-time-@i" />
            </div>
            <div class="col-sm-4">
                <label>Close Time</label>
                <input type="time" name="Business.OpenHours[@i].CloseTime" class="form-control" id="close-time-@i" />
            </div>
        </div>
    }
    <div asp-validation-summary="All" class="text-danger"></div>

    <!-- Submit Button -->
    <button type="submit" id="create-business-button" class="btn btn-primary" disabled>Create Business</button>
</form>

<script>
    function toggleDay(index) {
        const openTimeInput = document.getElementById(`open-time-${index}`);
        const closeTimeInput = document.getElementById(`close-time-${index}`);
        const isChecked = document.getElementById(`day-toggle-${index}`).checked;

        openTimeInput.disabled = isChecked;
        closeTimeInput.disabled = isChecked;

        if (isChecked) {
            openTimeInput.value = "";
            closeTimeInput.value = "";
        }
    }

    function checkBusinessName() {
        const businessNameInput = document.getElementById("business-name");
        const errorSpan = document.getElementById("business-name-error");
        const createButton = document.getElementById("create-business-button");
        const nameValue = businessNameInput.value.trim();

        if (nameValue === "") {
            errorSpan.textContent = "";
            createButton.disabled = true;
            return;
        }

        fetch(`/Businesses/CreateBusiness?handler=ValidateBusinessName&name=${encodeURIComponent(nameValue)}`)
            .then(response => response.json())
            .then(data => {
                if (data.conflict) {
                    errorSpan.textContent = "The business name is already taken.";
                    createButton.disabled = true;
                } else {
                    errorSpan.textContent = "";
                    createButton.disabled = false;
                }
            })
            .catch(error => console.error("Error validating business name:", error));
    }

    function checkFormValidity() {
        const nameInput = document.getElementById("business-name").value.trim();
        const createButton = document.getElementById("create-business-button");
        const nameError = document.getElementById("business-name-error").textContent;

        createButton.disabled = !nameInput || nameError;
    }
</script>
