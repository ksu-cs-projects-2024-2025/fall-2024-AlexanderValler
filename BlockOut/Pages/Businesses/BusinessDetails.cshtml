@page "{businessId}"
@model BlockOut.Pages.Businesses.BusinessDetailsModel
@{
    ViewData["Title"] = "Business Details";
}

<h2 id="business-name-container">
    @Model.Business.Name
</h2>

@if (Model.IsOwnerOrManager)
{
        <button id="edit-business-name-button" class="btn-link text-primary" onclick="toggleEditMode()" style="border: none; background: none;">Edit</button>
}

<div id="business-name-edit-container" class="d-none">
    <input type="text" id="business-name-input" class="form-control mb-2" value="@Model.Business.Name" onblur="checkBusinessName()" />
    <button class="btn btn-link text-dark" onclick="updateBusinessName()">Save</button>
    <span id="update-success" class="text-success d-none">Business name updated successfully!</span>
    <span id="update-error" class="text-danger d-none">Failed to update business name. Please try again.</span>
    <span id="business-name-error" class="text-danger d-none">Business name is too similar to an existing name.</span>
</div>

<!-- Page Layout -->
<div class="row">
    <!-- Left Column: Calendars List -->
    <div class="col-md-8">
        <h4>Calendars</h4>
        @if (Model.Calendars != null && Model.Calendars.Any())
        {
            <ul class="list-group">
                @foreach (var calendar in Model.Calendars)
                {
                    <li class="list-group-item">
                        <h5>@calendar.Name</h5>
                        <p>Participants: @string.Join(", ", calendar.UserBusinessCalendars.Select(ubc => ubc.User.UserName))</p>
                        <a asp-page="/Calendars/View" asp-route-calendarId="@calendar.Id" class="text-primary">View Calendar</a>
                        @if (Model.IsOwnerOrManager)
                        {
                            <button class="btn btn-link text-danger" onclick="removeCalendar('@calendar.Id')">Remove</button>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No calendars available.</p>
        }

        <!-- Create Calendar Button -->
        @if (Model.IsOwnerOrManager)
        {
            <div class="mt-4">
                <a asp-page="/Calendars/CreateCalendar" asp-route-businessId="@Model.Business.Id" class="btn btn-success">+ Create Calendar</a>
            </div>
        }
    </div>

    <!-- Right Column: Business Open Hours and Users -->
    <div class="col-md-4">
        <div class="d-flex justify-content-between">
            <h4>Open Hours</h4>
            @if (Model.IsOwnerOrManager)
            {
                <button id="edit-hours-button" class="btn btn-link text-primary" onclick="toggleHoursEdit()" style="border: none; background: none;">Edit</button>
            }
        </div>
        <form id="edit-hours-form" class="d-none">
            @Html.AntiForgeryToken()
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Day</th>
                        <th>Open</th>
                        <th>Close</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.DaysOfWeek.Length; i++)
                    {
                        var dayHours = Model.Business.OpenHours.FirstOrDefault(oh => oh.Day == i + 1);
                        <tr>
                            <td>
                                @Model.DaysOfWeek[i]
                                <br />
                                <a href="javascript:void(0);" class="text-danger" onclick="toggleClosed(@i)">Closed</a>
                            </td>
                            <td>
                                <input type="time" name="OpenTime" class="form-control" id="open-time-@i"
                                        value="@dayHours?.OpenTime?.ToString("hh\\:mm")" @(dayHours?.IsClosed == true ? "disabled" : "") />
                            </td>
                            <td>
                                <input type="time" name="CloseTime" class="form-control" id="close-time-@i"
                                        value="@dayHours?.CloseTime?.ToString("hh\\:mm")" @(dayHours?.IsClosed == true ? "disabled" : "") />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>

        <table class="table table-bordered" id="hours-table">
            <thead>
                <tr>
                    <th>Day</th>
                    <th>Open</th>
                    <th>Close</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.DaysOfWeek.Length; i++)
                {
                    var dayHours = Model.Business.OpenHours.FirstOrDefault(oh => oh.Day == i + 1);
                    <tr>
                        <td>@Model.DaysOfWeek[i]</td>
                        <td>
                            @if (dayHours == null || dayHours.IsClosed || !dayHours.OpenTime.HasValue)
                            {
                                <span>Closed</span>
                            }
                            else
                            {
                                <span>@dayHours.OpenTime.Value.ToString("hh\\:mm")</span>
                            }
                        </td>
                        <td>
                            @if (dayHours == null || dayHours.IsClosed || !dayHours.CloseTime.HasValue)
                            {
                                <span>Closed</span>
                            }
                            else
                            {
                                <span>@dayHours.CloseTime.Value.ToString("hh\\:mm")</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button id="save-hours-button" class="btn btn-primary d-none" onclick="saveHours()">Save</button>

        <h4>Users</h4>
        <ul class="list-group">
            <li class="list-group-item">
                <strong>Owners</strong>
                <ul>
                    @foreach (var userRole in Model.UserBusinessRoles.Where(ubr => ubr.Role == "Owner"))
                    {
                            <li>
                                <img src="~/images/@(userRole.User.ProfilePictureId ?? 0).png" alt="Profile Picture" class="rounded-circle me-2" style="width: 32px; height: 32px;" />
                            @userRole.User.UserName
                            </li>
                    }
                </ul>
            </li>
            <li class="list-group-item">
                <strong>Managers</strong>
                <ul>
                    @foreach (var userRole in Model.UserBusinessRoles.Where(ubr => ubr.Role == "Manager"))
                    {
                            <li>
                                <img src="~/images/@(userRole.User.ProfilePictureId ?? 0).png" alt="Profile Picture" class="rounded-circle me-2" style="width: 32px; height: 32px;" />
                            @userRole.User.UserName
                            </li>
                    }
                </ul>
            </li>
            <li class="list-group-item">
                <strong>Employees</strong>
                <ul>
                    @foreach (var userRole in Model.UserBusinessRoles.Where(ubr => ubr.Role == "Employee"))
                    {
                            <li>
                                <img src="~/images/@(userRole.User.ProfilePictureId ?? 0).png" alt="Profile Picture" class="rounded-circle me-2" style="width: 32px; height: 32px;" />
                            @userRole.User.UserName
                            </li>
                    }
                </ul>
            </li>
        </ul>

        @if (Model.IsOwnerOrManager)
        { 
            <a href="/Businesses/ManageEmployees/@Model.EncodedBusinessId" class="btn btn-primary">Manage Employees</a>
        }
    </div>
</div>

<!-- Delete Business Section -->
@if (Model.IsOwner)
{
    <div class="text-center mt-4">
        <a href="/Businesses/BusinessDeletion/@Model.EncodedBusinessId" class="btn btn-danger">Delete Business</a>
    </div>
}

<script>
    function toggleEditMode() {
        const nameContainer = document.getElementById("business-name-container");
        const editContainer = document.getElementById("business-name-edit-container");
        const editButton = document.getElementById("edit-business-name-button");

        nameContainer.classList.toggle("d-none");
        editContainer.classList.toggle("d-none");
        editButton.classList.toggle("d-none");
    }

    function checkBusinessName() {
        const businessNameInput = document.getElementById("business-name-input").value.trim();
        const nameError = document.getElementById("business-name-error");

        nameError.classList.add("d-none");

        if (!businessNameInput) {
            return;
        }

        fetch(`?handler=ValidateBusinessName&name=${encodeURIComponent(businessNameInput)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to validate business name.");
                }
                return response.json();
            })
            .then(data => {
                if (data.conflict) {
                    nameError.textContent = "The business name is too similar to an existing business.";
                    nameError.classList.remove("d-none");
                }
            })
            .catch(error => {
                console.error("Error validating business name:", error);
            });
    }

    function updateBusinessName() {
        const businessNameInput = document.getElementById("business-name-input").value.trim();
        const updateSuccess = document.getElementById("update-success");
        const updateError = document.getElementById("update-error");
        const nameError = document.getElementById("business-name-error");

        updateSuccess.classList.add("d-none");
        updateError.classList.add("d-none");

        if (!businessNameInput || !nameError.classList.contains("d-none")) {
            updateError.textContent = "Business name is invalid or conflicts with another.";
            updateError.classList.remove("d-none");
            return;
        }

        fetch('?handler=EditBusinessName', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                Id: '@Model.Business.Id',
                Name: businessNameInput
            })
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to update');
                }
            })
            .then(data => {
                if (data.success) {
                    updateSuccess.textContent = "Business name updated successfully!";
                    updateSuccess.classList.remove("d-none");

                    document.getElementById("business-name-container").textContent = businessNameInput;
                    toggleEditMode();
                } else {
                    updateError.textContent = data.message || "Failed to update business name.";
                    updateError.classList.remove("d-none");
                }
            })
            .catch((error) => {
                console.error(error);
                updateError.textContent = "Failed to update business name. Please try again.";
                updateError.classList.remove("d-none");
            });
    }


    function toggleHoursEdit() {
        const form = document.getElementById('edit-hours-form');
        const table = document.getElementById('hours-table');
        const editButton = document.getElementById('edit-hours-button');
        const saveButton = document.getElementById('save-hours-button');

        form.classList.toggle('d-none');
        table.classList.toggle('d-none');
        saveButton.classList.toggle('d-none');

        if (form.classList.contains('d-none')) {
            editButton.textContent = 'Edit';
        } else {
            editButton.textContent = 'Cancel';
        }
    }

    async function saveHours() {
        const openHours = [];
        for (let i = 0; i < 7; i++) {
            const openTimeInput = document.getElementById(`open-time-${i}`);
            const closeTimeInput = document.getElementById(`close-time-${i}`);
            const isClosed = openTimeInput.disabled;

            openHours.push({
                Day: i + 1,
                OpenTime: isClosed ? null : openTimeInput.value || null,
                CloseTime: isClosed ? null : closeTimeInput.value || null,
                IsClosed: isClosed
            });
        }

        try {
            const response = await fetch('?handler=SaveOpenHours', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(openHours)
            });

            if (response.ok) {
                window.location.reload(); // Refresh the page without showing a popup
            } else {
                const errorText = await response.text();
                console.error('Error response:', errorText);
                throw new Error('Failed to save open hours.');
            }
        } catch (error) {
            console.error("Error saving open hours:", error);
            alert('An error occurred while saving open hours.');
        }
    }

    function toggleClosed(index) {
        const openTimeInput = document.getElementById(`open-time-${index}`);
        const closeTimeInput = document.getElementById(`close-time-${index}`);

        if (openTimeInput.disabled) {
            // Reopen the day (enable inputs)
            openTimeInput.disabled = false;
            closeTimeInput.disabled = false;
        } else {
            // Mark the day as closed (disable inputs)
            openTimeInput.disabled = true;
            closeTimeInput.disabled = true;
            openTimeInput.value = ""; // Clear the value
            closeTimeInput.value = ""; // Clear the value
        }
    }

    function removeCalendar(calendarId) {
        if (!confirm("Are you sure you want to remove this calendar?")) {
            return;
        }

        fetch('?handler=RemoveCalendar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ CalendarId: calendarId }) // Matches RemoveCalendarRequest
        })

            .then(response => {
                if (response.ok) {
                    location.reload(); // Reload the page to reflect the updated state
                } else {
                    response.text().then(text => console.error("Error response:", text)); // Log error details
                    alert("Failed to remove the calendar. Please try again.");
                }
            })
            .catch(error => {
                console.error("Error removing calendar:", error);
                alert("An error occurred while removing the calendar.");
            });
    }
</script>
