@page "{businessId}"
@model BlockOut.Pages.Businesses.BusinessDetailsModel
@{
    ViewData["Title"] = "Business Details";
}

<h2>@Model.Business.Name</h2>

<!-- Edit Business Name (visible only for Owners or Managers) -->
@if (Model.IsOwnerOrManager)
{
    <div class="mb-4">
        <label for="business-name-input">Business Name:</label>
        <input type="text" id="business-name-input" class="form-control" value="@Model.Business.Name" />
        <button class="btn btn-primary mt-2" onclick="updateBusinessName()">Save</button>
        <span id="update-success" class="text-success d-none">Business name updated successfully!</span>
        <span id="update-error" class="text-danger d-none">Failed to update business name. Please try again.</span>
    </div>
}

<!-- Sidebar with user roles -->
<div class="row">
    <div class="col-md-4">
        <h4>Users in Business</h4>
        <ul class="list-group">
            <li class="list-group-item">
                <strong>Owners</strong>
                <ul>
                    @foreach (var userRole in Model.UserBusinessRoles.Where(ubr => ubr.Role == "Owner"))
                    {
                        <li>@userRole.User.UserName</li>
                    }
                </ul>
            </li>
            <li class="list-group-item">
                <strong>Managers</strong>
                <ul>
                    @foreach (var userRole in Model.UserBusinessRoles.Where(ubr => ubr.Role == "Manager"))
                    {
                        <li>@userRole.User.UserName</li>
                    }
                </ul>
            </li>
            <li class="list-group-item">
                <strong>Employees</strong>
                <ul>
                    @foreach (var userRole in Model.UserBusinessRoles.Where(ubr => ubr.Role == "Employee"))
                    {
                        <li>@userRole.User.UserName</li>
                    }
                </ul>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="col-md-8">
        <h4>Actions</h4>
        <button class="btn btn-secondary" onclick="window.location.href='/Businesses/ViewSchedules'">View Schedules</button>
        @if (Model.IsOwnerOrManager)
        {
            <button class="btn btn-primary" onclick="window.location.href='/Businesses/CreateSchedules'">Create Schedules</button>
        }
    </div>
</div>

<script>
    function updateBusinessName() {
        const businessNameInput = document.getElementById("business-name-input").value.trim();
        const updateSuccess = document.getElementById("update-success");
        const updateError = document.getElementById("update-error");

        if (!businessNameInput) {
            updateError.textContent = "Business name cannot be empty.";
            updateError.classList.remove("d-none");
            return;
        }

        fetch('/Businesses/BusinessDetails?handler=UpdateBusinessName', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ Id: '@Model.Business.Id', Name: businessNameInput })
        })
            .then(response => {
                if (response.ok) {
                    updateSuccess.classList.remove("d-none");
                    updateError.classList.add("d-none");
                } else {
                    throw new Error('Failed to update');
                }
            })
            .catch(() => {
                updateError.textContent = "Failed to update business name. Please try again.";
                updateError.classList.remove("d-none");
            });
    }
</script>
